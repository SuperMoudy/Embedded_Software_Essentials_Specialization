#******************************************************************************
# Copyright (C) 2017 by Alex Fosdick - University of Colorado
#
# Redistribution, modification or use of this software in source or binary
# forms is permitted as long as the files maintain this copyright. Users are 
# permitted to modify this and use it to learn about the field of embedded
# software. Alex Fosdick and the University of Colorado are not liable for any
# misuse of this material. 
#
#*****************************************************************************

#------------------------------------------------------------------------------
# A Makefile that supports two build systems; the host environment and 
# the target embedded system MSP432
#
# Use: make [TARGET] [PLATFORM-OVERRIDES]
#
# Build Targets:
#      <FILE>.i - Generates <FILE>.i preprocessed file
#      <FILE>.asm - Generates <FILE>.asm assembly file
#      <FILE>.o - Builds <FILE>.o object file
#      <FILE>.d - Generates <FILE>.d dependency file
#      compile-all - compiles all object files but doesn't link them
#      build - compiles all object files and links them
#      clean - removes all compiled objects, preprocessed outputs, 
#              assembly outputs, executable files and build output files
#
# Platform Overrides:
#      PLATFORM - Target platform we are compiling for (HOST, cortex-m4)
#
#------------------------------------------------------------------------------
# Include Sources and Include Paths
include sources.mk

# Platform Overrides
PLATFORM = HOST

# Architectures Specific Flags
LINKER_FILE = ./msp432p401r.lds
CPU = cortex-m4
ARCH = armv7e-m
SPECS = nosys.specs
ARM_CFLAGS = \
			-mcpu=$(CPU) \
			-mthumb \
			-march=$(ARCH) \
			-mfloat-abi=hard \
			-mfpu=fpv4-sp-d16 \
			--specs=nosys.specs

# Compiler Flags and Defines (PLATFORM dependent)
TARGET = c1m4
COURSE = COURSE1

ifeq ($(PLATFORM),HOST)
	CC = gcc
	
	LD = $(CC)
	
	LDFLAGS = -Wl,-Map=$(TARGET).map
	
	CFLAGS = -Wall -Werror -g -O0 -std=c99

	CPPFLAGS = -D$(PLATFORM) -D$(COURSE) -DVERBOSE

	SIZE = size

	OBJDUMP = objdump
else
	CC = arm-none-eabi-gcc
	
	LD = arm-none-eabi-gcc
	
	LDFLAGS = -Wl,-lm,-Map=$(TARGET).map -T $(LINKER_FILE)
	
	CFLAGS = -Wall -Werror -g -O0 -std=c99 $(ARM_CFLAGS)

	CPPFLAGS = -D$(PLATFORM) -D$(COURSE) -DVERBOSE

	SIZE = arm-none-eabi-size

	OBJDUMP = arm-none-eabi-objdump
endif

OBJS = $(SOURCES:.c=.o)
DEPS = $(SOURCES:.c=.d)
DEPFLAGS = -MM -MP

# Generate .i preprocessed file
%.i: %.c
	$(CC) -E $(CPPFLAGS) $(INCLUDES) -o $@ $<

# Generate .asm assembly file
%.asm: %.c
	$(CC) -S $(CPPFLAGS) $(CFLAGS) $(INCLUDES) -o $@ $<

# Generate .o object file
%.o: %.c
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $(INCLUDES) -o $@ $<
	#$(OBJDUMP) -S $@

# Generate .d dependency file
%.d: %.c
	$(CC) -E $(CPPFLAGS) $(DEPFLAGS) $(INCLUDES) -o $@ $<

# Compile all object files but don't link
.PHONY: compile-all
compile-all: $(OBJS)

# Compile all object files and link
.PHONY: build
build: $(DEPS) $(TARGET).out $(TARGET).asm

# Link all object files into executable file
$(TARGET).out: $(OBJS)
	$(LD) $(CFLAGS) $(LDFLAGS) -o $@ $^
	$(SIZE) -A -d $@

# Generate assembly file from output executable
$(TARGET).asm: $(TARGET).out
	#$(OBJDUMP) -d $^ >> $@

# Clean repo from all files generated by the Makefile
.PHONY: clean
clean:
	rm -f $(TARGET).* src/*.o src/*.d src/*.i src/*.asm
