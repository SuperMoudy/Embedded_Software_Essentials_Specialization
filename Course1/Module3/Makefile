#******************************************************************************
# Copyright (C) 2020 by Mahmoud Hamdy
#
# Redistribution, modification or use of this software in source or binary
# forms is permitted as long as the files maintain this copyright. Users are 
# permitted to modify this and use it to learn about the field of embedded
# software. Mahmoud Hamdy is not liable for any misuse of this material. 
#
#*****************************************************************************

#------------------------------------------------------------------------------
# A Makefile that builds the target embedded system MSP432 and investigate
# some interesting information.
#
# Use: make [TARGET] [PLATFORM-OVERRIDES]
#
# Build Targets:
#      <FILE>.i - Generates <FILE>.i preprocessed file
#      <FILE>.asm - Generates <FILE>.asm assembly file
#      <FILE>.o - Builds <FILE>.o object file
#      <FILE>.d - Generates <FILE>.d dependency file
#      compile-all - compiles all object files but doesn't link them
#      build - compiles all object files and links them
#      clean - removes all compiled objects, preprocessed outputs, 
#              assembly outputs, executable files and build output files
#
# Platform Overrides:
#      PLATFORM - Target platform we are compiling for (HOST, cortex-m4)
#
#------------------------------------------------------------------------------
SRCS = main.c misc.c
INCLUDES = -I./
OBJS = $(SRCS:.c=.o)
DEPS = $(SRCS:.c=.d)
DEPFLAGS = -MM -MP


# Platform Overrides
PLATFORM = MSP432

# Architectures Specific Flags
LINKER_FILE = msp432p401r.lds
CPU = cortex-m4
ARCH = armv7e-m
SPECS = nosys.specs
ARM_CFLAGS = \
			-mcpu=$(CPU) \
			-mthumb \
			-march=$(ARCH) \
			-mfloat-abi=hard \
			-mfpu=fpv4-sp-d16 \
			--specs=$(SPECS)

# Compiler Flags and Defines (PLATFORM dependent)
TARGET = c1m3
CPPFLAGS = -D$(PLATFORM)
CC = arm-none-eabi-gcc
LD = arm-none-eabi-ld
LDFLAGS = -Wl,-Map=$(TARGET).map,-T $(LINKER_FILE)
CFLAGS = -Wall -Werror -g -O0 -std=c99 $(ARM_CFLAGS)
SIZE = arm-none-eabi-size
OBJDUMP = arm-none-eabi-objdump
NM = arm-none-eabi-nm

# Generate .i preprocessed file
%.i: %.c
	$(CC) -E $(CPPFLAGS) $(INCLUDES) -o $@ $<

# Generate .asm assembly file
%.asm: %.c
	$(CC) -S $(CPPFLAGS) $(CFLAGS) $(INCLUDES) -o $@ $<

# Generate .o object file
%.o: %.c
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $(INCLUDES) -o $@ $<

# Generate .d dependency file
%.d: %.c
	$(CC) -E $(CPPFLAGS) $(DEPFLAGS) $(INCLUDES) -o $@ $<

# Compile all object files but don't link
.PHONY: compile-all
compile-all: $(OBJS)

# Compile all object files and link
.PHONY: build
build: $(DEPS) $(TARGET).out $(TARGET).asm

# Link all object files into executable file
$(TARGET).out: $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) -o $@ $^
	$(SIZE) -A -d $@
	$(NM) $@


# Generate assembly file from output executable
$(TARGET).asm: $(TARGET).out
	$(OBJDUMP) -d $^ >> $@

# Clean repo from all files generated by the Makefile
.PHONY: clean
clean:
	rm -f $(TARGET).* *.o *.d *.i *.asm


